SimpleShell Version History

===============================================================================
Stage One

Commenced 	- 28/01/2014
Ended		- 04/02/2014
-------------------------------------------------------------------------------
 
	v0.0 - 28/01/2014 - File birth

		Created initial file (SimpleShell.c) as well as read me files and a
		github repo.
		^ Tom

	v0.0.1 - 01/02/2014 - User input

		Created a basic loop to prompt the user and taken input using 
		fgets(). This is then checked to ensure that the user has not
		just hit enter. Once we are sure we have a sensible input, it is
		tokenised and printed back out the console. The user can also  
		exit the program if he desires. 
		^ Tom

		The command shall be stored in a struct, as this can be easily 
		accessed and passed, although this has not yet been fully
		implemented yet. 
		^ Tom

	v0.0.2 - 01/02/2014 - Reorganized 

		Mover the prompting of the user; getting input and tokenizing it to 
		a new function: getInput(). 
		^ Aidan

	v0.0.3 - 02/02/2014 - Loop improvement

		Changed while loop to a do while loop. Removes the need for an if check
		in main for when an INPUT_EXIT is returned. While check now replaces it.
		^ Grant

	v0.0.4 - 04/02/2014 - Ctrl D Integration

		Completed integration of Ctrl D to end the program by adding an if
		check on the input the check if fgets() returns NULL indicating the
		presence of the EOF signal. 
		^ Grant/Thomas

	v0.0.5 - 04/02/2014 - Clean up

		Cleaned up loose ends in the code:
			- checked the number of the parameters does not exceed the size of 
			the array
			- added comments for clarity
			- added whitespace
			- removed excess braces
			- reverted back to old user loop. As it will be more efficient once
			new features are added.
		
		This should be the final version of stage 1, apart from a brief 
		modification after testing to remove input checking printf()'s
		^ Tom

	v0.0.6 - 06/02/2014

		Fixed spelling issues
		^ Tom

	v0.1.0 - 04/02/2014 - Final stage one

 		Finalized everything.
 		^ Tom


===============================================================================
Stage Two

Commenced 	- 07/02/2014
Ended		- 14/02/2014 
-------------------------------------------------------------------------------

	v0.1.1 - 07/02/2014 - Input Processing
 
		Created a new function, called processInput(), to process the user Input 
		and run an executable file stored on the user's computer using the 
		fork(), waitpid() & execv()functions. The program can currently execute
		executable files within the current directory and it's subdirectories. 
		^ Thomas
 
 	v0.1.2 - 07/02/2014 - Further Input Processing
 
 		Changed execv() to execvp() to allow the SimpleShell to execute commands
 		from the PATH environment. Any programs stored locally can be ran with 
 		" ./ ". Also added more commentary throughout the program to explain
 		what it is doing.
		^ Thomas
 
 	v0.1.3 - 11/02/2014 - Fixed C99 Warnings
 
 		Added '#include <unistd.h>' to remove warnings from C99 when compiling.
		^ Thomas
 
 	v0.1.4 - 11/02/2014 - Invalid Input Filtering
 
 		Enclosed execvp() in an if statement so that when it returns "-1"
 		indicating that it has failed due to invalid input being entered, the
 		child process is killed allowing the parent to continue therefore
 		stopping "Shellception".
		^ Thomas

 	v0.1.5 - 11/02/2014 - Passing Input to Commands
 
 		Set execvp() to take process the arguments stored in command.args. To do
 		this, args[50][50] within the user_command struct had to be changed to
 		args[50] as execvp() could not handle the data type. I am now using
 		malloc within processInput() to assign each token it's space in memory.
		We also have to work out where and how to free any memory assigned by
 		malloc in order avoid any problems with memory in out systems.
 		<stdlib.h> was included to allow malloc to be used.
 
 		I also had to make another change within the processInput() function
 		as the command must be stored in args[0] with the arguments stored in
 		args[1] and onwards when it is passed into execp(). This has to be
 		tidied up as input_command is still being used in some places when it
 		could probably be completely removed.
 
 		The SimpleShell can now successfully carry out most built in Linux
 		commands and run executable files. It can also pass in any required
 		parameters.
		^ Thomas
 
 	v0.1.6 - 12/02/2014 - Memory Freeing
 
 		Created the function freeMemory() to free memory from malloc after each 
		command has been executed. It will clear all memory used by the malloc 
		for the args array from position 0 to the last used position.
		^ Thomas

	v0.1.7 - 13/02/2014 - Remove user_command
 
 		The user_command has been found to be redundant and unnecessary. The 
 		variable char *args[50] has been used to replace the original struct,
		user_command. The command will be stored in args[0] with the parameters 
		proceeding it in the following locations in the array. The entire 
		program has been adjusted to reflect these changes, with function 
		headers which take in a command as a parameter being altered 
		accordingly.
		^ Aidan

	v0.1.8 - 13/02/2014 - Fixing Aidan's Errors

 		Discovered that Aidan's changes contained a few bugs which I went
 		through and fixed. There were problems relating running commands as the
 	 	command was stored in command[0] then malloc was being used to assign
 		the memory. The line assigning memory had simply been overlooked when
 		making changes. Also added a new function to reset command to NULL
 		every time the program continues the loop.
 		^ Thomas

		Cleaned up getInput() to make it more readable and maintainable. 
		Also removed all input checking printf's as the function now works
		correctly.
 		^ Tom
 
 		Fixed issue with kill() not being defined in Linux.
 		^ Tom
 
 		Removed all input checking "printf's" & "puts" from processInput().
 		^ Thomas
 
 	v0.1.9 - 14/02/2014 - Improving malloc()
 
 		Improved malloc() in getInput() function to only assign the amount of
		memory that it needs rather than a fixed amount. This will stop the
 		program assigning too much memory for a value therefore leaving wasted
 		space or not assigning enough memory and causing a segmentation error
 		at runtime.
 		^ Thomas

 	v0.2.0 - 14/02/2014 - Final stage two

 		Finalized everything.
 		^ Tom


===============================================================================
Stage Three

Commenced 	- 14/02/2014 
Ended		- 14/02/2014 
-------------------------------------------------------------------------------

	v0.2.1 - 14/02/2014 - Set Home Directory
 
 		Created a function which changes the current directory to the home
 		directory by first using getenv() to get the location of the home
 		directory then chdir to move into it. The function is called as soon as
 		the program runs.
 		^ Thomas
 
 	v0.2.2 - 14/02/2014 - Print Working Directory
 
 		Used the getcwd() function to get the current working directory and
 		then print it out.
 		^ Thomas

 	v0.3.0 - 14/02/2014 - Final stage three

 		Finalized everything.
 		^ Tom
 		

===============================================================================
Stage Four

Commenced 	- 14/02/2014 
Ended		- 16/02/2014
-------------------------------------------------------------------------------

 	v0.3.1 - 16/02/2014 - Getting and restoring the original PATH
 
 		Created a function, getPath() to get the current PATH of the system. 
 		Also created a function, setPath() to set the PATH of the system. These
 		two functions are used to get a PATH of the system when the shell is
 		first started and then to set it back to the original value when the
 		shell is exited.
 		^ Tom
 
 	v0.3.2 - 16/02/2014 - Add to PATH
 
 		Added two new built in commands: getpath and setpath. The getpath()
 		function prints out the contents of the system's PATH environment while
 		the setpath() function allows the user to add new directories into the
 		PATH environment.
 		^ Thomas

 	v0.4.0 - 16/02/2014 - Final stage four

 		Finalized everything
 		^ Tom

===============================================================================
Stage Five

Commenced 	- 16/02/2014 
Ended		- 16/02/2014
-------------------------------------------------------------------------------


	v0.4.1 - 16/02/2014 - Change Directory
 
 		Added change_directory() function to allow the user to navigate between
 		directories with the command cd.
 		^ Thomas

	v0.5.0 - 16/02/2014 - Final stage five

 		Finalized everything
 		^ Tom/Thomas/Grant

===============================================================================
Stage Six

Commenced 	- 16/02/2014 
Ended		- 06/03/2014
-------------------------------------------------------------------------------


	v0.5.1 - 19/02/2014 - History

		Added basic history functionality. Introduced array history, which 
		stores the user's input. The int count is used to control the array.
		Added update_history(), where the array is continuously updated with the
		latest input. In the event that the array is full, the history is 
		shifted left to allow the new input to be added.
		^ Aidan

	v0.5.2 - 19/02/2014 - Print History

		Added print_history(), where when invoked by the user with the command 
		"history", will print upto the previous 20 commands.
		^ Aidan

	v0.5.3 - 20/02/2014 - Moved tokenising
 
 		Move the tokenising code into its own method to facilitate the execution
 		of commands stored in history.
 		^ Tom
 
 	v0.5.4 - 20/02/2014 - Improved Error Messages
 		
 		Added perror() to change_directory() and print_working_directory() to
 		print out the relevant errno message when the user enters incorrect
 		information
 		^ Thomas
 
 	v0.5.5 - 28/02/2014 - PATH Improvements
 
 		Modified the setpath() function to change the PATH rather than adding to
 		it.
 		^ Tom
 
 		Added a printf to alert the user that they are exiting the shell, as
 		well as the PATH that has just been restored from the start of the 
 		program 
 		^ Tom
 
 		Updated setpath() to include error checking. It now checks if the
 		command has been used correctly and if the entered PATH is a directory
 		^ Tom
 
 	v0.5.6 - 20/02/2014 - History invocation
  	
 		Within process_input():
 		The command "!!" is now recognized, and will execute the previous
 		command when such a command is available.
 		The command "!<no>" is also now recognized. However, commands like "!1d"
 		are currently recognized.
 		^ Aidan
 
 	v0.5.7 - 28/02/2014 - History invocation fix
 
 		Fixed the bug where inputs like "!1a" were deemed valid history
 		invocations.
 		^ Aidan
 
 	v0.5.8 - 02/03/2014 - Too many arguments fix
 
 		Fixed an issue where the pwd command and the cd command would accept
 		too many parameters eg: "pwd 1" or "cd /Desktop 1"
 		^ Thomas
 
 	v0.5.9 - 06/03/2014 - Removed extra setpath
 
 		Removed excess setpath() function.
 		Modified setPath() and setpath() so things make more sense. As these
 		functions where very similar. One taking a string, with the other 
 		taking the command.
 		^Tom

 	v0.6.0 - 06/03/2014 - Final stage six

 		Finalized everything
 		^ Tom/Aidan/Grant

===============================================================================
Stage Seven

Commenced 	- 06/03/2014 
Ended		- 06/03/2014
-------------------------------------------------------------------------------

	v0.6.1 - 06/03/2014 - saveHistory

		Added saveHistory(), where the contents of the history array is taken
		and stored into a file which is rewritten if exists or created if it does
		not exist. The call to the function was added after everything else in
		main().
		^ Grant

	v0.6.2 - 06/03/2014 - openHistory

		Added openHistory(), where the contents of the file .history is taken
		and stored line by line into the history array using updatehistory(). 
		If the file does not exist then it just exits the function.
		^ Grant

	v0.7.0 - 06/03/2014 - Final stage seven

 		Finalized everything
 		^ Tom/Grant



===============================================================================
Stage Eight

Commenced 	- 06/03/2014 
Ended		- 27/03/2014
-------------------------------------------------------------------------------

	v0.7.1 - 07/03/2014 - Fixed openHistory()
 
		Found a bug on Linux where the shell would crash while running on Linux
 		if the history file did not already exist. The program would create the
 		new file but as it would be empty, any attempt to read data from it
 		would cause segmentation errors.
  
 		Moved the call to saveHistory() within main() to inside if(INPUT_EXIT) so
 		the shell isn't wasting time by making unnecessary writes to memory. It
 		now only reads the file on start up and writes to it on the program's
 		exit.
 
 		Also changed the history file name from .history to .hist_list as
 		required by the assignment specification.
 		^ Thomas

 	v0.7.2 - 13/03/2014 - Implemented add_alias()
 
		New method called add_alias() was created to allow the user to call the
		command alias along with another two parameters to make a new alias for
		the name of the first parameter.

		The aliases are stored in a new struct called Alias with one pointer to 
		the name of the alias and another to the command that it maps to. The 
		struct was initialised in main and the processInput() was updated to 
		check for the initial command being alias and using it to call 
		add_alias()
 		^ Aidan/Grant

 	v0.7.3 - 13/03/2014 - Implemented print_alias()
 
		New method to print out all the alias currently contained within the 
		alias struct by using a while loop to go though the struct to get out 
		each alias name and the accompanying command. However if the count_alias
		is at 0 then there is no alias is the array so the error message is 
		displayed to show that there is no aliases.
 		^ Aidan/Grant

 	v0.7.4 - 13/03/2014 - Implemented alias()
 
		New method alias was created to check is the user wants to run 
		print_alias or add_alias. It checks to see if the command[1] is null to 
		see if anything has been entered after the alias command. If there is 
		nothing then it will run print_alias otherwise it will run add_alias 
		instead. Made relevant change to processInput() to use alias().
 		^ Aidan/Grant

 	v0.7.5 - 20/03/2014 - Implemented unalias()
 
		Unalias method added to allow the user to take out a selected alias from 
		the current aliaes stored in the struct. It searches though the struct
		for to find if the alias that the user ask to remove exists. If it 
		if contained within the struct them it shifts all aliases and commands
		to the left after the location of the alias that is to be removed, while
		count_alias if decremented.

		If it does not find the alias then it will print out a message saying
		that the alias does not exist.
 		^ Aidan/Grant
 
 	v0.7.6 - 20/03/2014 - Exit changes
 
 		Fixed the issue where exit can make it into the history
 		^ Tom
 
 		Moved the exiting section of the user loop in main and placed the code
 		in a separate method exiting(). this allows us to exit the program from
 		any location in the program. 
 		
 		Also removed the exit check from tokenising making the general code
 		cleaner. The current check for exit is in process input this makes 
 		sense.
 		^ Tom

 	v0.7.7 - 20/03/2014 - Invoking Aliases
 
		Implemented the invoking of alias inside the tokenise() so that the 
		alias check is performed before fully tokenising the line. This is done
		by checking the first command entered to see if it is an alias. If the
		command is an alias then it will concatenate the command that the alias
		is meant to be and the remainder of the original command entered. It 
		will them carry out tokenise of the new input created.

		If there is no alias then it just runs tokenise as normal.
 		^ Aidan

 	v0.7.8 - 20/03/2014 - Fixing Issues with Aliases
 
		Fixed issues with checking to make sure that you can't add anymore
		aliases once the limit of 10 has been reached. Fixed issues with the
		shifting of aliases that was not clearing out the last stored alias so
		messes with a new alias being added.

		Added check to make sure you can't alias an alias and you can't alias
		a command to itself.
 		^ Aidan/Grant


 	v0.8.0 - 27/03/2014 - Final stage Eight

 		Finalized everything
 		^ Tom/Grant

===============================================================================
Stage Nine

Commenced 	- 27/03/2014 
Ended		- 09/04/2014
-------------------------------------------------------------------------------

	v0.8.1 - 07/04/2014 - saveAlias
 	
 		Added the function saveAlias() which opens or creates a file called 
  		.aliases in the users home directory and saves a list of all the
 		aliases that are stored by the shell along with the commands they map
 		to. It is called in the exiting function much like saveHistory.
 		^ Grant
 
 	v0.8.2 - 08/04/2014 - loadAlias
 	
 		Added the function loadAlias() which opens a file called .aliases
  		if it exists in the users home directory and for each line in the file
 		it processes it as a new alias to add it to the list of stored aliases
 		until the whole file has been read.
 		^ Grant

 	v0.9.0 - 09/04/2014 - Final stage Nine

 		Finalized everything
 		^ Grant

===============================================================================
Final

Commenced 	- 09/04/2014 
Ended		- 13/04/2014
-------------------------------------------------------------------------------

	v0.9.1 - 09/04/2014 - New Macros
 
 		Changed SET_HOME_DIR(), GET_PATH(), SET_PATH_STRING() functions into 
 		separate macros for each function. Each function was only one line of
 		code so having it as a marco makes it a bit more maintainable.
 		^ Aidan
 
 	v0.9.2 - 09/04/2014 - Header File
 
		New header file called SimpleShell.h has been created to store the
 		macros used in the program, the constants, forward declarations as
 		well as the structure used for aliases created for the shell.
 		^ Tom
 
 	v0.9.3 - 12/04/2014 - Code Reorganization
 
 		All the methods where sorted into order under the headings history code,
 		alias code and build in commands along with a section for the global
		variables. More white space was added to make the code easier to read.
 		Unnecessary code used in history and alias was removed.
 		^ Tom/Aidan

 	v0.9.4 - 12/04/2014 - Revision History, Comments and error messages
 
 		Revision histoy and comments checked for spelling mistakes and where
 		changed accordingly. New commentary whas added where needed to make
 		the code more maintainable. Error messages where changed to also tell
 		where the error occurred as well as having a better discription of what
 		issue actually was when informing the user.
 		^ Grant/Tom

 	v1.0.0 - 13/04/2014 - Final SimpleShell

 		Finalized everything
 		^ Grant